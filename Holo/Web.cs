using Holo.SIGame;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;

namespace Holo
{
    public static class Web
    {
        public static bool UseAttempter = true;
        public static int AttemptsCount = 7;
        public static int AttemptsDelay = 12000;
        public static int StandartDelay = 400;

        private static readonly HttpClient httpClient = new HttpClient();
        private static readonly WebClient webClient = new WebClient();

        private static long currentFile = 0;

        public static string GetRequest(string address, CacheInfo cacheInfo = null)
        {
            if (cacheInfo == null)
            {
                string answer = GetRequest(new Uri(address));
                Thread.Sleep(StandartDelay);
                return answer;
            }
            else
            {
                if (CacheSystem.Check(cacheInfo))
                {
                    return CacheSystem.Get(cacheInfo);
                }
                else
                {
                    string answer = GetRequest(new Uri(address));
                    CacheSystem.Cache(cacheInfo, answer);
                    Thread.Sleep(StandartDelay);
                    return answer;
                }
            }
        }

        private static string GetRequest(Uri uri, int attempt = 0)
        {
            ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12 | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;

            string result = httpClient.GetAsync(uri).Result.Content.ReadAsStringAsync().Result;

            if (UseAttempter)
            {
                if (result.Contains("Retry later"))
                {
                    Thread.Sleep(AttemptsDelay);
                    attempt++;
                    if (attempt < AttemptsCount) return GetRequest(uri, attempt);
                    else throw new Exception("Слишком частые запросы к API!");
                }
            }

            return result;
        }

        public static string GetFilename(string path, string extension, out string filename_)
        {
            filename_ = $"media{currentFile}{extension}";
            string filename = $"{path}{filename_}";
            currentFile++;
            return filename;
        }

        //path generated by GetFilename
        public static void DownloadFile(string url, string path)
        {
            webClient.DownloadFile(url, path);
        }
    }
}
